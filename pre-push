#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
#------------------------------------------------------------------------------

for f in ./*.js; do
    # generamos la doc en html
    jsdoc $f
    # generamos la doc en md
    #jsdoc2md ${f} > "${f%.*}.md"
    # comentado porque en windows no se instala fácilmente
    # pese a ésto, se adjunta una muestra generada en linux
done

# Sincronizamos los directorios local:out y remoto:~/www/2023/varios/ED
rsync -azvP ./out/ luis@luiscastelar.duckdns.org:~/www/2023/varios/ED

# capturamos al salida del último comando y verificamos si fue correcta (=0)
ret=$?
if [ $ret -eq 0 ]; then
    echo "La documentación fue generada y sincronizada."
    echo "La puedes consultar en https://luiscastelar.duckdns.org/2023/varios/ED/"
    exit 0
else
    echo "Se ha producido un error generando la sincronización."
    exit 1
fi

#------------------------------------------------------------------------------
#exit 0
